import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm

n_iteration = 30000

######################### Define Mesh ##########################

nx = 350
ny = 100
x = np.arange(nx)
y = np.arange(ny)
X, Y = np.meshgrid(x, y, indexing="ij")
#################################################################


######################### Define Obstacle #######################

cylinder_diameter = 20
cylinder_x = nx // 5
cylinder_y = ny // 2
cylinder_radius = cylinder_diameter / 2

obstacle = np.sqrt((X - cylinder_x) **2 + (Y - cylinder_y) **2 ) < \
    cylinder_radius

##################################################################


################# Define Lattice Variables #######################

n_discrete = 9   #D2Q9 Lattice
lattice_velocities = np.array([          #Shape (2,9)
    [0, 1, 0, -1,  0, 1, -1, -1,  1],
    [0, 0, 1,  0, -1, 1,  1, -1, -1]
    ])

lattice_weights = \
    np.array([4/9, 1/9, 1/9, 1/9, 1/9, 1/36, 1/36, 1/36, 1/36]) # Shape(9)

lattice = np.arange(n_discrete)
noslip = np.array([0, 3, 4, 1, 2, 7, 8, 5, 6]) # For Bounce back B.C

right_discrete = np.array([1, 5, 8])
left_discrete = np.array([3, 6, 7])

###################################################################


############## FLow Characteristics ###############################

inflow_velocity = 0.04
velocity_initialize = np.zeros((nx, ny, 2))
velocity_initialize[:,:,0] = inflow_velocity

reynolds_number = 1000
viscosity = inflow_velocity * cylinder_diameter / reynolds_number
relaxation_factor = 1 / (3 * viscosity + 0.5)

density_initialize = np.ones((nx, ny))

###################################################################


####################### Needed Functions ##########################

def equlibrium(density_e, macroscopic_velocity):  
    # Density shape(nx, ny) need new axis,  macroscopic_velocity shape(nx, ny, 2), 
    # lattice velocity shape(2,9)   Output must be (nx, ny, 9) (discrete velocity)
    dot_macro_and_lattice = np.einsum("dq,xyd -> xyq", 
                                      lattice_velocities, macroscopic_velocity)

    macro_magnitude = np.sqrt(macroscopic_velocity[:,:, 0]**2 + \
                              macroscopic_velocity[:,:, 1]**2)
    discrete_equlibrium = density_e[:,:, np.newaxis] * \
        lattice_weights[np.newaxis, np.newaxis, :] * \
            (1 + 3 * dot_macro_and_lattice + (9/2) * (dot_macro_and_lattice)**2 \
             -(3/2) * macro_magnitude[:,:,np.newaxis]**2)
    
    return discrete_equlibrium

def macroscopic_velocity_f(density_m, discrete_vels):
    #Lattice velocities shape(2,9), discrete velocities shape(nx,ny,9)
    #Output must be (nx, ny, 2)
    macroscopic_velocity = np.einsum("xyq, dq -> xyd", 
                                     discrete_vels, lattice_velocities) / \
        density_m[:,:, np.newaxis]
    
    return macroscopic_velocity


def density_function(discrete_vel):
    density_f = np.sum(discrete_vel, axis=-1)
    return density_f

####################################################################


############### Calculation Loop ###################################

discrete_velocity = equlibrium(density_initialize, velocity_initialize)
initial_discrete = discrete_velocity.copy()

plt.style.use("dark_background")
plt.figure(figsize=(10,5))

for i in tqdm(range(n_iteration)):
    
    # Outlet Boundary Condition
    initial_discrete[-1,:, left_discrete] = \
        initial_discrete[-2, :, left_discrete]
    
    # Macroscopic Velocity
    density = density_function(initial_discrete)
    
    macro_velocity = macroscopic_velocity_f(density, initial_discrete)
    
    # Inlet Boundary Condition Zou/He
    macro_velocity[0, 1:-1, :] = velocity_initialize[0, 1:-1, :]
    
    top_of_division = (initial_discrete[0,:,0] + initial_discrete[0,:,2] + \
                     initial_discrete[0,:,4] + 2*(initial_discrete[0,:,3] + \
                                                 initial_discrete[0,:,6] + \
                                                     initial_discrete[0,:,7]))
    bottom_of_division = 1 - macro_velocity[0,:,0]
    
    density[0,:] = top_of_division / bottom_of_division
    
    # Equlibrium discrete velocity 
    equlibrium_discrete_velocity = equlibrium(density, macro_velocity)
    
    initial_discrete[0, :, right_discrete] = \
        equlibrium_discrete_velocity[0, :, right_discrete]

    
    ### Collide
    discrete_velocity_after_collision = initial_discrete - \
        relaxation_factor * (initial_discrete - equlibrium_discrete_velocity)
    
    
    # Bounce-back 
    for j in range(n_discrete):
        discrete_velocity_after_collision[obstacle, lattice[j]] = \
            initial_discrete[obstacle, noslip[j]]
    
    # Diffusion
    for k in range(n_discrete):
        initial_discrete[:,:, k] = np.roll(
            np.roll(discrete_velocity_after_collision[:,:, k], 
                    lattice_velocities[0,k],
                axis=0),
            lattice_velocities[1,k], axis=1)

    macro_velocity_magnitude = np.sqrt(macro_velocity[:,:, 0]**2 + \
                                       macro_velocity[:,:, 1]**2) .T 
    
    if i >= 500:
        
        if i % 500 == 0 and i != 0:
            plt.clf()
            plt.gca().add_patch(plt.Circle((cylinder_x, cylinder_y),
                                           cylinder_radius, color="black"))
            plt.imshow(macro_velocity_magnitude) 
            plt.colorbar().set_label("Velocity")
            file_name = "velocity" + str((i // 500)+14)+".png"
            plt.savefig(file_name )
            plt.pause(0.1)
        
    elif i >= 100:
        if i % 100 ==0 and i != 0:
            plt.clf()
            plt.gca().add_patch(plt.Circle((cylinder_x, cylinder_y),
                                           cylinder_radius, color="black"))
            plt.imshow(macro_velocity_magnitude) 
            plt.colorbar().set_label("Velocity")
            file_name = "velocity" + str((i // 500)+14)+".png"
            plt.savefig(file_name )
            plt.pause(0.1)
    else:
        if i % 10 == 0 and i != 0 or i==1:
            plt.clf()
            plt.gca().add_patch(plt.Circle((cylinder_x, cylinder_y),
                                           cylinder_radius, color="black"))
            plt.imshow(macro_velocity_magnitude)  
            plt.colorbar().set_label("Velocity")
            file_name = "velocity" + str((i // 500)+14)+".png"
            plt.savefig(file_name )
            plt.pause(0.1)
    
